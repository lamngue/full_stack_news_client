{"version":3,"file":"static/js/711.7fb93ce5.chunk.js","mappings":"6PA6GA,UAxGiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAWXC,EAAgB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAS,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACvCC,QAAQC,IAAI,UAAWN,GAAW,wBAAAE,EAAAK,OAAA,GAAAR,EAAA,KACnC,gBAFqBS,GAAA,OAAAb,EAAAc,MAAA,KAAAC,UAAA,KAWtB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHC,KAAK,QACLC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,cAAe,CACbC,UAAU,GAEZC,iBAnBqB,CACvBC,SAAU,wBACVC,MAAO,CACLC,MAAO,mCAiBPC,SAlCe,SAACC,GAClBlC,GAASmC,EAAAA,EAAAA,IAASD,IAASE,MAAK,SAACC,GAClB,oBAATA,EACFnC,EAAS,KAEToC,EAAAA,GAAAA,MAAc,yCAElB,GACF,EA2BIC,eAAgBnC,EAChBoC,aAAa,MAAKC,SAAA,EAElBC,EAAAA,EAAAA,KAACpB,EAAAA,EAAAA,KAAS,CACRqB,MAAM,QACNpB,KAAK,QACLqB,MAAO,CACL,CACEd,UAAU,EACVQ,QAAS,4BAEX,CAAEO,KAAM,UACRJ,UAEFC,EAAAA,EAAAA,KAACI,EAAAA,EAAK,OAERJ,EAAAA,EAAAA,KAACpB,EAAAA,EAAAA,KAAS,CACRqB,MAAM,WACNpB,KAAK,WACLqB,MAAO,CACL,CACEd,UAAU,EACVQ,QAAS,gCAEXG,UAEFC,EAAAA,EAAAA,KAACI,EAAAA,EAAK,OAERJ,EAAAA,EAAAA,KAACpB,EAAAA,EAAAA,KAAS,CACRqB,MAAM,WACNpB,KAAK,WACLqB,MAAO,CACL,CACEd,UAAU,EACVQ,QAAS,gCAEXG,UAEFC,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,SAAc,OAGjBJ,EAAAA,EAAAA,KAACpB,EAAAA,EAAAA,KAAS,CACRC,KAAK,WACLwB,cAAc,UACdrB,WAAY,CACVsB,OAAQ,EACRvB,KAAM,IACNgB,UAEFC,EAAAA,EAAAA,KAACO,EAAAA,EAAQ,CAAAR,SAAC,mBAGZC,EAAAA,EAAAA,KAACpB,EAAAA,EAAAA,KAAS,CACRI,WAAY,CACVsB,OAAQ,EACRvB,KAAM,IACNgB,UAEFC,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CAACL,KAAK,UAAUM,SAAS,SAAQV,SAAC,iBAMjD,C","sources":["components/register.js"],"sourcesContent":["import { Form, Input, Button, Checkbox, message } from \"antd\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { saveUser } from \"../redux/action_creators\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst Register = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const onRegister = (values) => {\r\n    dispatch(saveUser(values)).then((data) => {\r\n      if (data === \"Registered User\") {\r\n        navigate(\"/\");\r\n      } else {\r\n        message.error(\"User with that username already exists\");\r\n      }\r\n    });\r\n  };\r\n\r\n  const onRegisterFailed = async (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const validateMessages = {\r\n    required: \"${label} is required!\",\r\n    types: {\r\n      email: \"${label} is not a valid email!\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      name=\"basic\"\r\n      labelCol={{\r\n        span: 8,\r\n      }}\r\n      wrapperCol={{\r\n        span: 16,\r\n      }}\r\n      initialValues={{\r\n        remember: true,\r\n      }}\r\n      validateMessages={validateMessages}\r\n      onFinish={onRegister}\r\n      onFinishFailed={onRegisterFailed}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Form.Item\r\n        label=\"Email\"\r\n        name=\"email\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your email!\",\r\n          },\r\n          { type: \"email\" },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Username\"\r\n        name=\"username\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your username!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Password\"\r\n        name=\"password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input your password!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"remember\"\r\n        valuePropName=\"checked\"\r\n        wrapperCol={{\r\n          offset: 8,\r\n          span: 16,\r\n        }}\r\n      >\r\n        <Checkbox>Remember me</Checkbox>\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        wrapperCol={{\r\n          offset: 8,\r\n          span: 16,\r\n        }}\r\n      >\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Register\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"names":["dispatch","useDispatch","navigate","useNavigate","onRegisterFailed","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","errorInfo","wrap","_context","prev","next","console","log","stop","_x","apply","arguments","_jsxs","Form","name","labelCol","span","wrapperCol","initialValues","remember","validateMessages","required","types","email","onFinish","values","saveUser","then","data","message","onFinishFailed","autoComplete","children","_jsx","label","rules","type","Input","valuePropName","offset","Checkbox","Button","htmlType"],"sourceRoot":""}